# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AcceptContractDataInputDto {
  businessDeviceId: String!
  deviceName: String!
  onboardingSessionId: String!
}

type AcceptContractDataResponseDto {
  email: String!
  errors: [ErrorDetail!]
  onboardingSessionId: String!
  otpResponse: GenerateOtpRespDto!
  requestId: String!
  status: String!
}

type CnbQrInfoResponse {
  amount: Float!
  cnbAccount: String!
  peopleAccount: String
  peopleName: String
  status: String!
  transactionDate: String
  transactionNumber: String
}

type CommissionDto {
  amount: Float!
  id: String!
  status: String!
  transactionDate: String!
  type: String!
}

type CommissionPayoutDestinationAccount {
  """The name of the account holder."""
  name: String!

  """The account holder's RUC."""
  ruc: String!
}

type CommissionPayoutTaxDetails {
  """The total tax amount."""
  amount: Float!

  """The tax rate applied."""
  rate: Float!
}

type CommissionsButtonStatusResponseDto {
  errors: [ErrorDetail!]
  message: String!
  status: String!
}

input ConfirmDataInputDto {
  establishment: EstablishmentInputDto!
  onboardingSessionId: String!
}

type ConfirmDataResponseDto {
  errors: [ErrorDetail!]
  onboardingSessionId: String!
  status: String!
}

input ConfirmDepositInput {
  transactionId: String!
}

type ConfirmDepositResponse {
  errors: [ErrorDetail!]
  message: String!
  status: String!
  transactionDate: String
  transactionNumber: String
}

input CreateCalificationInput {
  comments: String
  context: String!
  rating: Int!
}

type CreateCalificationResponse {
  errors: [ErrorDetail!]
  status: String!
}

type DataGenerateOtpRespDto {
  message: String!
  remainingResendAttempts: Float
}

type DataResponse {
  address: [EstablishmentValidateCnbOutputDto!]
  cnbState: String
  errors: [ErrorDetail!]
  merchantName: String!
  preApprovedState: String!
  remainingAttemptsOnb: Float
  status: String!
}

type DataStateCnb {
  startOnbCnb: StartOnbCnb!
}

type DocumentValidationResponse {
  errors: [ErrorDetail!]
  status: String!
  statusValidation: String!
}

input DocumentValidationStartDto {
  backsideImage: String!
  country: String!
  frontsideImage: String!
  idType: String!
  onboardingSessionId: String!
}

type ErrorDetail {
  code: String!
  message: String!
}

input EstablishmentInputDto {
  fullAddress: String!
  numberEstablishment: String!
}

type EstablishmentOutputDto {
  fullAddress: String!
  numberEstablishment: String!
}

type EstablishmentValidateCnbOutputDto {
  commercialName: String!
  establishmentType: String!
  fullAddress: String!
  headquarters: String!
  numberEstablishment: String!
  state: String!
}

input ExecuteDepositInput {
  transactionId: String!
}

type ExecuteDepositResponse {
  errors: [ErrorDetail!]
  message: String!
  status: String!
}

input FacialAndLivenessValidationDto {
  method: Int!
  token1: String!
  token2: String!
}

input FingeprintCodeInputDto {
  fingerprintData: String!
  nationalID: String!
  onboardingSessionId: String!
}

type FingeprintCodeResponseDto {
  errors: [ErrorDetail!]
  message: String!
  status: String!
}

type GenerateCommissionInvoiceResponseDto {
  errors: [ErrorDetail!]

  """The message of the response."""
  message: String!
  status: String!
}

type GenerateOtpRespDto {
  expirationDate: String!
  remainingResendAttempts: Float!
}

input GenerateQrInput {
  amount: String!
}

type GenerateQrResponse {
  errors: [ErrorDetail!]
  qrBase64: String!
  qrId: String!
  qrUrl: String!
  status: String!
  transactionId: String!
}

input GetCnbTransactionsInput {
  fromDate: String!
  page: Int!
  size: Int!
  toDate: String!
  transacitonType: String
}

type GetCnbTransactionsResponse {
  currentPage: Int!
  errors: [ErrorDetail!]
  status: String!
  totalElements: Int!
  totalPages: Int!
  transactions: [Transaction!]!
}

type GetCommissionPayoutPreviewResponseDto {
  errors: [ErrorDetail!]

  """The prepared commission payout preview details."""
  prepareCommissionPayout: PrepareCommissionPayout!
  status: String!
}

input GetQrInput {
  transactionId: String!
}

input InitiateCellPhoneDepositInput {
  amount: String!
  beneficiaryPhoneNumber: String!
}

type InitiateCellPhoneDepositResponse {
  beneficiaryAccountNumber: String!
  beneficiaryName: String!
  errors: [ErrorDetail!]
  message: String!
  ordererAccountNumber: String!
  ordererName: String!
  status: String!
  transactionId: String!
}

type MonthlyCommissionSummary {
  month: String!
  monthlyCount: Int!
  monthlyTotal: Float!
}

type MonthlyCommissionSummaryResponse {
  errors: [ErrorDetail!]
  status: String!
  summary: [MonthlyCommissionSummary!]!
}

type Mutation {
  acceptContract(input: AcceptContractDataInputDto!): AcceptContractDataResponseDto!
  confirmCellPhoneDeposit(input: ExecuteDepositInput!): ExecuteDepositResponse!
  confirmData(input: ConfirmDataInputDto!): ConfirmDataResponseDto!
  createCalification(input: CreateCalificationInput!): CreateCalificationResponse!
  generateCommissionInvoice: GenerateCommissionInvoiceResponseDto!
  initiateCellPhoneDeposit(input: InitiateCellPhoneDepositInput!): InitiateCellPhoneDepositResponse!
  kycValidateDocument(input: DocumentValidationStartDto!): DocumentValidationResponse!
  qrGenerator(input: GenerateQrInput!): GenerateQrResponse!
  resendOtp(input: ResendOtpInput!): ResendOtpResponse!
  signContract(input: SignContractInput!): SignContractResponse!
  startOnboarding: StartOnboardingResponse!
  storeFingeprintCode(input: FingeprintCodeInputDto!): FingeprintCodeResponseDto!
  uploadClientsFile(file: Upload!): UploadClientsFileResponse!
  validateOtp(input: ValidateOtpInputDto!): ValidateOtpResponseDto!
}

type PrepareCommissionPayout {
  """The currency of the payout."""
  currency: String!

  """The destination bank account."""
  destinationAccount: CommissionPayoutDestinationAccount!

  """The net amount to be paid out."""
  netPayoutAmount: Float!

  """The reason for the payout."""
  payoutReason: String!

  """The subtotal amount before taxes."""
  subtotalAmount: Float!

  """The tax details."""
  taxDetails: CommissionPayoutTaxDetails!
}

type Query {
  cnbQrInfo(input: GetQrInput!): CnbQrInfoResponse!
  cnbTransactions(input: GetCnbTransactionsInput!): GetCnbTransactionsResponse!
  commissionsButtonStatus: CommissionsButtonStatusResponseDto!
  confirmDeposit(input: ConfirmDepositInput!): ConfirmDepositResponse!
  monthlyCommissionSummary: MonthlyCommissionSummaryResponse!
  prepareCommissionPayout: GetCommissionPayoutPreviewResponseDto!
  queryDocument(input: QueryDocumentInput!): QueryDocumentResponse!
  searchCommissions(input: SearchCommissionsInputDto!): SearchCommissionsResponseDto!
  startBiometricValidation(input: StartBiometricValidationInputDto!): StartBiometricValidationResponseDto!
  validateBalance(input: ValidateBalanceInputDto!): ValidateBalanceResponseDto!
  validateCnbState: DataResponse!
  validateDepositAccount(input: ValidateDepositAccountInput!): ValidateDepositAccountResponse!
}

type QueryDocumentData {
  b64encoded: String!
  presignedUrl: String!
}

input QueryDocumentInput {
  templateName: String!
}

type QueryDocumentResponse {
  data: QueryDocumentData!
  errors: [ErrorDetail!]
  message: String!
  status: String!
}

input ResendOtpInput {
  onboardingSessionId: String!
}

type ResendOtpResponse {
  errors: [ErrorDetail!]
  expirationDate: String
  message: String!
  remainingResendAttempts: Float
  status: String!
}

input SearchCommissionsInputDto {
  endMonth: String!
  page: Int!
  size: Int!
  startMonth: String!
}

type SearchCommissionsResponseDto {
  commissions: [CommissionDto!]!
  currentPage: Int!
  totalElements: Int!
  totalPages: Int!
}

input SignContractInput {
  """unique identified of the session"""
  onboardingSessionId: String!
}

type SignContractResponse {
  details: SignContractResponseDetails
  errorCode: String
  errors: [ErrorDetail!]
  message: String!
  status: String!
}

type SignContractResponseDetails {
  errorMessage: String
  getOtpDataResult: String!
}

input StartBiometricValidationInputDto {
  facialAndLivenessValidation: FacialAndLivenessValidationDto!
  onboardingSessionId: String!
}

type StartBiometricValidationResponseDto {
  errors: [ErrorDetail!]
  scanId: String!
  status: String!
}

type StartOnbCnb {
  data: StartOnbCnbData!
  status: String!
}

type StartOnbCnbData {
  cnbClientId: String!
  message: String!
  ruc: Float!
}

type StartOnboardingResponse {
  errors: [ErrorDetail!]
  establishments: [EstablishmentOutputDto!]!
  onboardingSessionId: String!
  status: String!
}

type Transaction {
  amount: Float!
  currency: String!
  date: String!
  description: String!
  id: String!
  source: String!
  type: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadClientsFileResponse {
  errors: [ErrorDetail!]
  message: String!
  skippedRecords: [String!]!
  status: String!

  """number of records to be processed in the file"""
  totalProcessed: Float!
}

input ValidateBalanceInputDto {
  """amount to be validated based on the transaction"""
  ammount: Float!
}

type ValidateBalanceResponseDto {
  availableBalance: Float!
  isValidAmmount: Boolean!
}

input ValidateDepositAccountInput {
  beneficiaryPhoneNumber: String!
}

type ValidateDepositAccountResponse {
  beneficiaryAccountNumber: String!
  beneficiaryName: String!
  errors: [ErrorDetail!]
  message: String!
  status: String!
}

input ValidateOtpInputDto {
  businessDeviceId: String!
  onboardingSessionId: String!
  otp: String!
  requestId: String!
}

type ValidateOtpResponseDto {
  errors: [ErrorDetail!]
  isVerifiedOtp: Boolean!
  otpResponse: DataGenerateOtpRespDto!
  status: String!
}